import asyncio
from logging.config import fileConfig

from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import pool

from alembic import context

# Add project root to sys.path to allow importing app modules
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))

from app.core.db import Base  # Your SQLAlchemy declarative base
from app.core.config import settings as app_settings # Your Pydantic settings

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata # Makes Alembic aware of your models for autogenerate

# Naming convention for autogenerated constraints (recommended for consistency)
# Ensure your SQLAlchemy models also use explicit naming for critical constraints.
convention = {
    "ix": "ix_%(table_name)s_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    db_url_str = app_settings.DATABASE_URL.render_as_string(hide_password=False) \
        if hasattr(app_settings.DATABASE_URL, 'render_as_string') \
        else str(app_settings.DATABASE_URL)
    # For offline mode, ensure we use a URL string that a sync engine can handle
    # if your main URL is async only. Usually, for offline, it just generates SQL.
    # If your DATABASE_URL uses 'postgresql+asyncpg', replace with 'postgresql' for offline.
    offline_db_url = db_url_str.replace("+asyncpg", "")

    context.configure(
        url=offline_db_url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        render_as_batch=True,
        naming_convention=convention
    )
    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection):
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        render_as_batch=True,
        naming_convention=convention,
        compare_type=True,
        compare_server_default=True
    )
    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""

    db_url_str = app_settings.DATABASE_URL.render_as_string(hide_password=False) \
        if hasattr(app_settings.DATABASE_URL, 'render_as_string') \
        else str(app_settings.DATABASE_URL)

    connectable = create_async_engine(db_url_str, poolclass=pool.NullPool)
    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)
    await connectable.dispose()


if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online()) 